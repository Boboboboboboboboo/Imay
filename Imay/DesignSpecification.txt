 一、框架
	以下设计步骤按顺序进行。
	
	1.分层设计。
		用户界面层
		业务逻辑层
		数据持久层

	2.依赖注入容器。
		采用Microsoft官方DI库。
		对应用程序配置, 对象创建, 全局变量等进行抽象封装和初始化。

	3.配置。
		抽象出一层, 配置应注入到依赖注入容器。
			实现：
				(首选)方式一：通过AppSettingManager类读取App.Config配置。
					  方式二：通过Microsoft官方的新版库, 采用Json格式读取配置。

	4.通讯层。
		客户端
			封装在业务逻辑层之下。(*先简单处理, 后期再独立出一个库, 实现各种通讯方式。并采用工厂模式, 建造者模式创建实例)
			抽象出抽象基类。
			底层通讯层封装一层, 上层实现接口的开放即可。
				实现：
				(首选)方式一：Tcp通讯。(可实现各种方式的Tcp通讯, 先实现简单的)
				      方式二：Udp通讯。
		服务器
			由Asp.Net Core Host设计独立的Web Api服务器。
			提供接口供客户端调用。
				消息的获取采用拉取(pull)的方式。

	5.* 数据持久层。
		连接业务逻辑层, 与数据库通讯。
			(首选)方式一：SqlServer数据库。
			      方式二：MongoDb数据库(*大数据)。

	6.* 登陆
		建立UI界面及用户身份验证, 授权机制。

 二、设计原则
	1.模块与模块之间, 类与类之间必须通过抽象交互, 禁止有直接依赖。
	2.功能应按照职责封装到相应的类中, 有类处理符合自身特性的功能。
	3.编码前应明确设计的目标, 未想好功能的框架, 思路前, 不可进行编码。
	4.应严格遵循"对扩展开放, 对修改封闭"原则, 想好未来可能的设计目标, 并且当前的设计应已于扩展到该目标, 而不是不易于修改。